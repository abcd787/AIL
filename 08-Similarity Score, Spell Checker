a. POS Tagging 
import re


def fill_missing_tags(sentence):
    # Extract all existing tags
    tags = re.findall(r'/([A-Z]+)(?=\s|,|\.)', sentence)
    existing_tags = set(tags)
     
    # Split the sentence into tokens while preserving delimiters
    tokens = re.split(r'(\s|,|\.)', sentence)
     
    for i in range(len(tokens)):
        token = tokens[i]
        if '?' in token:
            # Split the word and the missing tag
            parts = token.split('/')
            word = parts[0]
            missing_tag = parts[1]
             
            # Determine the required tag length
            tag_length = len(missing_tag)
             
            # Find possible tags of the required length
            possible_tags = [tag for tag in existing_tags if len(tag) == tag_length]
             
            # Choose the most appropriate tag based on context
            if tag_length == 2:
                if word.lower() in ['system', 'star', 'computer', 'book', 'table']:
                    chosen_tag = 'NN'  # Noun
                elif word.lower() in ['is', 'am', 'are']:
                    chosen_tag = 'VB'  # Verb
                else:
                    chosen_tag = possible_tags[0] if possible_tags else 'NN'
            elif tag_length == 3:
                if word.lower() in ['caught', 'seen', 'done']:
                    chosen_tag = 'VBN'  # Past participle
                elif word.lower() in ['was', 'were']:
                    chosen_tag = 'VBD'  # Past tense verb
                else:
                    chosen_tag = possible_tags[0] if possible_tags else 'VBN'
             
            # Replace the missing tag
            tokens[i] = f"{word}/{chosen_tag}"
     
    # Reconstruct the sentence
    filled_sentence = ''.join(tokens)
    return filled_sentence


def main():
    # Sample input with missing tags
    sample_input = "She/PRP watched/??? the/DT movie/?? last/JJ night/NN, and/CC it/PRP was/VBD amazing/JJ."


    print("Input sentence:", sample_input)
   
    # Fill in the missing tags
    output_sentence = fill_missing_tags(sample_input)
   
    # Print the output
    print("\nOutput sentence:", output_sentence)


if __name__ == "__main__":
    main()

b. Similarity Score 
import math
 
d = list()
d.append('An apple a day keeps the doctor away'.lower().split(' '))
d.append('Never compare an apple to an orange'.lower().split(' '))
 
d.append('I prefer scikit-learn to orange'.lower().split(' '))
compDoc = "I'd like an apple".split(' ')
 
terms = set()
tf = list()
temp = dict()
for doc in d:
    for item in doc:
        temp[item] = doc.count(item)/len(doc)
        terms.add(item)
    tf.append(temp)
    temp = dict()
 
idf = dict()
temp = dict()
for term in terms:
    temp[term] = 0
    for doc in d:
        if term in doc:
            temp[term]+=1
    idf[term] = 1+math.log(3/temp[term])
#print("idf:\n",idf)
     
tfidf = [0, 0, 0]
for term in compDoc:
    for i in range(len(d)):
        if term in d[i]:
            tfidf[i]+= tf[i][term]*idf[term]
print(tfidf.index(max(tfidf))+2)

c. Spell Checker
import re
from collections import Counter


# Simulated corpus for the purpose of spelling correction
CORPUS_TEXT = """
Normally people are serious and pure in their intent. They note everything and contain all
the necessary documents.
An accident dose can change someone's life. The result is purely unexpected, even if
everything seems ordinary.
END-OF-CORPUS
"""


def load_corpus(text):
    word_freq = Counter()
    for line in text.splitlines():
        if line.strip() == "END-OF-CORPUS":
            break
        words = re.findall(r"[a-zA-Z'-]+", line.lower())
        word_freq.update(words)
    return word_freq


def edits1(word):
    letters = 'abcdefghijklmnopqrstuvwxyz'
    splits = [(word[:i], word[i:]) for i in range(len(word) + 1)]


    deletes = [L + R[1:] for L, R in splits if R]
    transposes = [L + R[1] + R[0] + R[2:] for L, R in splits if len(R) > 1]
    replaces = [L + c + R[1:] for L, R in splits if R for c in letters]
    inserts = [L + c + R for L, R in splits for c in letters]


    return set(deletes + transposes + replaces + inserts)


def correct(word, word_freq):
    word = word.lower()
    if word in word_freq:
        return word


    candidates = edits1(word)
    valid_candidates = [w for w in candidates if w in word_freq]


    if not valid_candidates:
        return word


    return max(valid_candidates, key=lambda w: (word_freq[w], -len(w)))  # Prefer higher freq, shorter word


def main():
    word_freq = load_corpus(CORPUS_TEXT)


    try:
        N = int(input("Enter number of words to correct: "))
        for _ in range(N):
            word = input("Enter word: ").strip()
            print("Corrected:", correct(word, word_freq))
    except Exception as e:
        print("Error:", e)


if __name__ == "__main__":
    main()
   
