a. Tic Tac Toe –

def print_board(board):
    print("-------------")
    for i in range(3):
        print("|", board[i*3], "|", board[i*3+1], "|", board[i*3+2], "|")
        print("-------------")

def check_winner(board, player):
    for i in range(3):
        if board[i*3] == board[i*3+1] == board[i*3+2] == player:
            return True
        if board[i] == board[i+3] == board[i+6] == player:
            return True
    if board[0] == board[4] == board[8] == player:
        return True
    if board[2] == board[4] == board[6] == player:
        return True
    return False

def tic_tac_toe():
    board = [" " for _ in range(9)]
    current_player = "X"
    game_over = False

    while not game_over:
        print_board(board)
        position = int(input(f"Player {current_player}, enter your move (1-9): ")) - 1

        if board[position] == " ":
            board[position] = current_player
            if check_winner(board, current_player):
                print_board(board)
                print(f"Player {current_player} wins!")
                game_over = True
            elif " " not in board:
                print_board(board)
                print("It's a tie!")
                game_over = True
            else:
                current_player = "O" if current_player == "X" else "X"
        else:
            print("Invalid move. Try again.")

if __name__ == "__main__":
    tic_tac_toe()

b. N Queens –
def printSolution(board, N):
    for i in range(N):
        for j in range(N):
            if board[i][j] == 1:
                print("Q", end=" ")
            else:
                print(".", end=" ")
        print()

def isSafe(board, row, col, N):
    for i in range(col):
        if board[row][i] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solveNQUtil(board, col, N):
    if col >= N:
        return True

    for i in range(N):
        if isSafe(board, i, col, N):
            board[i][col] = 1

            if solveNQUtil(board, col + 1, N):
                return True

            board[i][col] = 0

    return False

def solveNQ(N):
    board = [[0 for _ in range(N)] for _ in range(N)]

    if not solveNQUtil(board, 0, N):
        print("Solution does not exist")
        return False

    printSolution(board, N)
    return True

if __name__ == '__main__':
    try:
        N = int(input("Enter the value of N: "))
        if N <= 0:
            print("Please enter a positive integer.")
        else:
            solveNQ(N)
    except ValueError:
        print("Invalid input. Please enter a valid integer.")


c. Magic square –
def generateSquare(n):
    if n % 2 == 0:
        print("Magic squares can only be generated for odd-sized matrices.")
        return

    magicSquare = [[0 for x in range(n)] for y in range(n)]

    i = n // 2
    j = n - 1

    num = 1
    while num <= (n * n):
        if i == -1 and j == n:  
            j = n - 2
            i = 0
        else:
            if j == n:
                j = 0
            if i < 0:
                i = n - 1

        if magicSquare[int(i)][int(j)]:  
            j = j - 2
            i = i + 1
            continue
        else:
            magicSquare[int(i)][int(j)] = num
            num = num + 1

        j = j + 1
        i = i - 1  

    print("Magic Square for n =", n)
    print("Sum of each row or column:", n * (n * n + 1) // 2, "\n")

    for i in range(0, n):
        for j in range(0, n):
            print('%2d ' % (magicSquare[i][j]), end='')
            if j == n - 1:
                print()

if __name__ == "__main__":
    try:
        n = int(input("Enter an odd value for N: "))
        if n <= 0:
            print("Please enter a positive integer.")
        elif n % 2 == 0:
            print("Magic squares can only be generated for odd-sized matrices.")
        else:
            generateSquare(n)
    except ValueError:
        print("Invalid input. Please enter a valid integer.")
