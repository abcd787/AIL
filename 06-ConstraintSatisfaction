# a. Cryptarithmetic –
from itertools import permutations

def solve_cryptarithmetic():
    print("Cryptarithmetic Puzzle Solver")
    print("Enter the puzzle in the format: SEND + MORE = MONEY")
    puzzle = input("Enter the puzzle: ").upper().replace(" ", "")
    
    try:
        # Parse the input
        parts = puzzle.split('=')
        left_part = parts[0].split('+')
        word1 = left_part[0].strip()
        word2 = left_part[1].strip()
        result_word = parts[1].strip()
    except:
        print("Invalid input format. Please use format like 'SEND + MORE = MONEY'")
        return None
    
    # Get all unique letters
    letters = sorted(list(set(word1 + word2 + result_word)))
    if len(letters) > 10:
        print("Error: Too many unique letters (maximum 10)")
        return None
    
    print(f"\nSolving: {word1} + {word2} = {result_word}")
    print(f"Unique letters: {', '.join(letters)}")
    
    digits = range(10)
    first_letters = {word1[0], word2[0], result_word[0]}
    
    for perm in permutations(digits, len(letters)):
        sol = dict(zip(letters, perm))
        
        # Skip solutions where first letters are 0
        if any(sol[letter] == 0 for letter in first_letters):
            continue
            
        # Calculate numerical values
        def word_to_num(word):
            num = 0
            for c in word:
                num = num * 10 + sol[c]
            return num
        
        num1 = word_to_num(word1)
        num2 = word_to_num(word2)
        result = word_to_num(result_word)
        
        if num1 + num2 == result:
            print("\nSolution found:")
            print(f"{word1}: {num1}")
            print(f"{word2}: {num2}")
            print(f"{result_word}: {result}")
            print("Letter assignments:")
            for letter in letters:
                print(f"{letter}: {sol[letter]}")
            return sol
    
    print("\nNo solution found")
    return None

# Example usage:
# When prompted, enter: SEND + MORE = MONEY
solve_cryptarithmetic()


# b. Crossword puzzle –
class CrosswordCSP:
    def __init__(self, variables, domains, overlaps):
        self.variables = variables
        self.domains = domains
        self.overlaps = overlaps  # (var1, var2): (i, j) means var1[i] == var2[j]
        self.assignment = {}

    def is_consistent(self, var, word):
        for other_var in self.assignment:
            if var == other_var:
                continue
            if (var, other_var) in self.overlaps:
                i, j = self.overlaps[(var, other_var)]
                if word[i] != self.assignment[other_var][j]:
                    return False
            elif (other_var, var) in self.overlaps:
                j, i = self.overlaps[(other_var, var)]
                if word[i] != self.assignment[other_var][j]:
                    return False
        return True

    def backtrack(self):
        if len(self.assignment) == len(self.variables):
            return self.assignment

        unassigned_vars = [v for v in self.variables if v not in self.assignment]
        var = unassigned_vars[0]

        for word in self.domains[var]:
            if self.is_consistent(var, word):
                self.assignment[var] = word
                result = self.backtrack()
                if result:
                    return result
                del self.assignment[var]
        return None

# Variables
variables = ['H1', 'H2', 'V1', 'V2']

# Domains (word list of length 3)
word_list = ['CAT', 'DOG', 'RAT', 'MAT', 'CAR', 'BAR']
domains = {v: word_list for v in variables}

# Overlap constraints: (var1, var2): (i, j)
# H1[0] == V1[0], H1[2] == V2[0], H2[0] == V1[2], H2[2] == V2[2]
overlaps = {
    ('H1', 'V1'): (0, 0),
    ('H1', 'V2'): (2, 0),
    ('H2', 'V1'): (0, 2),
    ('H2', 'V2'): (2, 2),
}

# Solve
csp = CrosswordCSP(variables, domains, overlaps)
solution = csp.backtrack()

# Display
if solution:
    for var in sorted(solution):
        print(f"{var}: {solution[var]}")
else:
    print("No solution found.")


# c. Map colouring problem -
def solve_map_coloring():
    # Australia map with adjacent regions
    map = {
        'WA': ['NT', 'SA'],
        'NT': ['WA', 'SA', 'Q'],
        'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
        'Q': ['NT', 'SA', 'NSW'],
        'NSW': ['Q', 'SA', 'V'],
        'V': ['SA', 'NSW'],
        'T': []
    }
    
    colors = ['Red', 'Green', 'Blue']
    
    def backtrack(assignment):
        if len(assignment) == len(map):
            return assignment
        
        var = select_unassigned_variable(assignment)
        for color in colors:
            if is_consistent(var, color, assignment, map):
                new_assignment = assignment.copy()
                new_assignment[var] = color
                result = backtrack(new_assignment)
                if result is not None:
                    return result
        return None
    
    def select_unassigned_variable(assignment):
        # MRV heuristic
        unassigned = [v for v in map if v not in assignment]
        return min(unassigned, key=lambda v: len(get_legal_colors(v, assignment, map)))
    
    def get_legal_colors(var, assignment, map):
        used_colors = {assignment[n] for n in map[var] if n in assignment}
        return [c for c in colors if c not in used_colors]
    
    def is_consistent(var, color, assignment, map):
        for neighbor in map[var]:
            if neighbor in assignment and assignment[neighbor] == color:
                return False
        return True
    
    solution = backtrack({})
    
    if solution:
        print("Map coloring solution:")
        for region, color in solution.items():
            print(f"{region}: {color}")
    else:
        print("No solution found")

solve_map_coloring()
