#DFS
from collections import defaultdict
#dfs
# jug1 and jug2 contain the value 
# for max capacity in respective jugs 
# and aim is the amount of water to be measured. 
jug1, jug2, aim = 3, 5, 4

visited = defaultdict(lambda: False)

def waterJugSolver(amt1, amt2): 

 # Checks for our goal and 
 # returns true if achieved.
 if (amt1 == aim and amt2 == 0) or (amt2 == aim and amt1 == 0):
  print(amt1, amt2)
  return True
 
 # Checks if we have already visited the
 # combination or not. If not, then it proceeds further.
 if visited[(amt1, amt2)] == False:
  print(amt1, amt2)
 
  # Changes the boolean value of the combination as it is visited. 
  visited[(amt1, amt2)] = True
 
  # Check for all the 6 possibilities and 
  # see if a solution is found in any one of them.
  return (waterJugSolver(0, amt2) or
    waterJugSolver(amt1, 0) or
    waterJugSolver(jug1, amt2) or
    waterJugSolver(amt1, jug2) or
    waterJugSolver(amt1 + min(amt2, (jug1-amt1)),
    amt2 - min(amt2, (jug1-amt1))) or
    waterJugSolver(amt1 - min(amt1, (jug2-amt2)),
    amt2 + min(amt1, (jug2-amt2))))
 
 # Return False if the combination is 
 # already visited to avoid repetition otherwise
 # recursion will enter an infinite loop.
 else:
  return False

print("Steps: ")
waterJugSolver(0, 0)

# BFS
from collections import deque

def waterJugSolverBFS(jug1, jug2, aim):
    queue = deque([(0, 0)])
    visited = set([(0, 0)])
    parents = {}

    while queue:
        current_state = queue.popleft()
        amt1, amt2 = current_state

        if amt1 == aim or amt2 == aim:
            steps = []
            while current_state != (0, 0):
                steps.append(current_state)
                current_state = parents[current_state]
            steps.append((0, 0))
            steps.reverse()
            return steps

        next_states = [
            (jug1, amt2),  
            (amt1, jug2),  
            (0, amt2),     
            (amt1, 0),     
            (min(jug1, amt1 + amt2), max(0, amt1 + amt2 - jug1)),  
            (max(0, amt1 + amt2 - jug2), min(jug2, amt1 + amt2))   
        ]

        for state in next_states:
            if state not in visited:
                queue.append(state)
                visited.add(state)
                parents[state] = current_state

    return None

# Example usage:
jug1_capacity = 5
jug2_capacity = 3
desired_quantity = 4

solution = waterJugSolverBFS(jug1_capacity, jug2_capacity, desired_quantity)
if solution:
    for step in solution:
        print(step)
else:
    print("No solution found.")
