# a. 8 puzzle –
import heapq

class PuzzleState:
    def __init__(self, board, parent=None, move=""):
        self.board = [row[:] for row in board]
        self.parent = parent
        self.move = move
        self.depth = 0
        if parent:
            self.depth = parent.depth + 1

    def __eq__(self, other):
        return self.board == other.board

    def __lt__(self, other):
        return self.heuristic() < other.heuristic()

    def __hash__(self):
        return hash(tuple(tuple(row) for row in self.board))

    def __str__(self):
        return '\n'.join([' '.join(map(str, row)) for row in self.board])

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j

    def heuristic(self):
        # Manhattan distance heuristic
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    x, y = divmod(self.board[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def get_successors(self):
        successors = []
        i, j = self.find_blank()
        moves = [(0, 1, 'Right'), (0, -1, 'Left'), (1, 0, 'Down'), (-1, 0, 'Up')]

        for di, dj, move in moves:
            ni, nj = i + di, j + dj
            if 0 <= ni < 3 and 0 <= nj < 3:
                new_board = [row[:] for row in self.board]
                new_board[i][j], new_board[ni][nj] = new_board[ni][nj], new_board[i][j]
                successors.append(PuzzleState(new_board, self, move))
        return successors

    def is_goal(self, goal_board):
        return self.board == goal_board

def best_first_search(initial_board, goal_board):
    initial_state = PuzzleState(initial_board)
    goal_state = PuzzleState(goal_board)
    
    open_list = []
    closed_set = set()
    heapq.heappush(open_list, (initial_state.heuristic(), initial_state))
    
    while open_list:
        _, current = heapq.heappop(open_list)
        
        if current.is_goal(goal_board):
            path = []
            while current.parent:
                path.append(current.move)
                current = current.parent
            return path[::-1]
        
        closed_set.add(current)
        
        for successor in current.get_successors():
            if successor not in closed_set:
                heapq.heappush(open_list, (successor.heuristic(), successor))
    
    return None  # No solution found

def get_puzzle_input(prompt):
    print(prompt)
    board = []
    for i in range(3):
        while True:
            row_str = input(f"Enter row {i+1} (3 numbers separated by spaces, 0 for blank): ")
            try:
                row = list(map(int, row_str.split()))
                if len(row) != 3:
                    raise ValueError
                board.append(row)
                break
            except ValueError:
                print("Invalid input. Please enter 3 numbers separated by spaces.")
    return board

def main():
    print("8-Puzzle Solver using Best-First Search")
    print("Enter the initial state:")
    initial_board = get_puzzle_input("Enter the initial board (0 represents the blank space):")
    
    print("\nEnter the goal state:")
    goal_board = get_puzzle_input("Enter the goal board (0 represents the blank space):")
    
    solution = best_first_search(initial_board, goal_board)
    
    if solution:
        print("\nSolution found in", len(solution), "moves:")
        print(" -> ".join(solution))
    else:
        print("\nNo solution found!")

if __name__ == "__main__":
    main()


# b. Robot Navigation problem –
from collections import deque

def robot_navigation_bfs(grid, start, goal):
  rows, cols = len(grid), len(grid[0])
  if not (0 <= start[0] < rows and 0 <= start[1] < cols and
          0 <= goal[0] < rows and 0 <= goal[1] < cols and
          grid[start[0]][start[1]] == 0 and grid[goal[0]][goal[1]] == 0):
    return None  # Invalid start/goal or obstacles

  queue = deque([(start, [start])])  # Queue stores (position, path_so_far)
  visited = {start}  # Keep track of visited cells to avoid cycles

  while queue:
    (current_row, current_col), path = queue.popleft()

    if (current_row, current_col) == goal:
      return path

    # Explore valid neighboring cells
    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
      next_row, next_col = current_row + dr, current_col + dc
      if (0 <= next_row < rows and 0 <= next_col < cols and
          grid[next_row][next_col] == 0 and (next_row, next_col) not in visited):
        queue.append(((next_row, next_col), path + [(next_row, next_col)]))
        visited.add((next_row, next_col))

  return None  # No path found

# Example Usage:
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]
start_position = (0, 0)
goal_position = (4, 4)

path = robot_navigation_bfs(grid, start_position, goal_position)

if path:
  print("Path found:")
  for cell in path:
    print(cell)
else:
  print("No path found.")

# c. Cities Distance (shortest path) problem-
import heapq

class CityGraph:
    def __init__(self):
        self.graph = {}
    
    def add_edge(self, city1, city2, distance):
        if city1 not in self.graph:
            self.graph[city1] = {}
        if city2 not in self.graph:
            self.graph[city2] = {}
        self.graph[city1][city2] = distance
        self.graph[city2][city1] = distance

class CityState:
    def __init__(self, city, parent=None, cost=0):
        self.city = city
        self.parent = parent
        self.cost = cost

    def __eq__(self, other):
        return self.city == other.city

    def __lt__(self, other):
        return self.heuristic() < other.heuristic()

    def __hash__(self):
        return hash(self.city)

    def heuristic(self, goal_city, straight_line_distances):
        # Use straight-line distance as heuristic (must be admissible)
        return straight_line_distances.get(self.city, {}).get(goal_city, 0)

def best_first_search_cities(graph, start, goal, straight_line_distances):
    open_list = []
    closed_set = set()
    start_state = CityState(start)
    heapq.heappush(open_list, (start_state.heuristic(goal, straight_line_distances), start_state))
    
    while open_list:
        _, current = heapq.heappop(open_list)
        
        if current.city == goal:
            path = []
            total_distance = current.cost
            while current.parent:
                path.append(current.city)
                current = current.parent
            path.append(start)
            return path[::-1], total_distance
        
        closed_set.add(current.city)
        
        for neighbor, distance in graph.graph[current.city].items():
            if neighbor not in closed_set:
                new_cost = current.cost + distance
                new_state = CityState(neighbor, current, new_cost)
                heapq.heappush(open_list, 
                             (new_state.heuristic(goal, straight_line_distances), new_state))
    
    return None, None  # No path found

# Example usage
city_graph = CityGraph()
city_graph.add_edge('A', 'B', 4)
city_graph.add_edge('A', 'C', 2)
city_graph.add_edge('B', 'C', 1)
city_graph.add_edge('B', 'D', 5)
city_graph.add_edge('C', 'D', 8)
city_graph.add_edge('C', 'E', 10)
city_graph.add_edge('D', 'E', 2)

# Straight-line distances (heuristic) - must be <= actual distance
straight_line_dist = {
    'A': {'E': 10},
    'B': {'E': 8},
    'C': {'E': 7},
    'D': {'E': 2},
    'E': {'E': 0}
}

start_city = 'A'
goal_city = 'E'
path, distance = best_first_search_cities(city_graph, start_city, goal_city, straight_line_dist)
print("Cities Path Solution:", path)
print("Total Distance:", distance)
